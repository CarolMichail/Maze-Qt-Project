#include <QApplication>
#include <QGraphicsView>
#include <QGraphicsScene>
#include <QFile>
#include <QTextStream>
#include <QGraphicsPixmapItem>
#include <cheese.h>
#include <pellet.h>
#include <jerry.h>
#include <tom.h>
#include <QDebug>
#include<QVector>

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    QGraphicsView view;
    QGraphicsScene scene;
    view.setWindowTitle("Tom And Jerry Game");
    view.setFixedSize(1000,1000);
    view.setBackgroundBrush(QBrush(Qt::gray));
    int boardData[20][20];
    int adjMatrix[230][230]={{0}};
     int vertex;
    QVector<QVector<int>> adjM;
    QFile file("board.txt");
    file.open(QIODevice::ReadOnly);
    QTextStream stream(&file);
    QString temp;
    for (int i = 0; i < 20; i++)
      {  for (int j = 0; j < 20; j++)
        {
            stream >> temp;
            boardData[i][j]=temp.toInt();
        }
    }

          for (int i = 1; i < 19; i++)
              {   for (int j = 1; j < 19; j++)
                     {
                    vertex = boardData[i][j];

                   if (boardData[i][j] >=0)
       {

                if (boardData[i][j + 1] >= 0 )
                {
                    adjMatrix[vertex][boardData[i][j+1]] = 1;
                }
        if(boardData[i-1][j]>=0)

                  {
                    adjMatrix[vertex][boardData[i-1][j]] = 1;

                }
     if(boardData[i][j-1]>=0)
                {
                    adjMatrix[vertex][boardData[i][j-1]] = 1;
                }
      if(boardData[i+1][j]>=0)
                {

                 adjMatrix[vertex][boardData[i+1][j]] = 1;
                }

                else
                {
                    adjMatrix[vertex][boardData[i][j]] = 0;
                }
                       }
            }

}


          /*for (int s=0;s<230;s++)
               {
                  for( int k=0;k<230;k++)
               qDebug()<<"adj=: "<<adjMatrix[s][k]<<" ";

                      }

*/
          
          
          QVector<QVector<int>> Dijkstra(int Graph[COUNT][COUNT], int startVertex)
          {
              int temp[COUNT][COUNT];
              for (int i = 0; i < COUNT; i++)
              {
                  for (int j = 0; j < COUNT; j++)
                  {
                      if (Graph[i][j] == 0)
                          temp[i][j] = INFINITE;
                      else
                          temp[i][j] = Graph[i][j];
                  }
              }
              bool visited[COUNT];
              int previous[COUNT];
              float cost[COUNT];
              // 1st Row:
              for (int i = 0; i < COUNT; i++)
              {
                  if (i == startVertex)
                  {
                      previous[i] = -1;
                      cost[i] = 0;
                      visited[i] = true;
                  }
                  else
                  {
                      previous[i] = startVertex;
                      cost[i] = temp[startVertex][i];
                      visited[i] = false;
                  }
              }
              // All Rows:
              int count = 1;
              while (count < COUNT)
              {
                  // Determine which vertex to visit.
                  int minimum = INFINITE, visitedVertex;
                  for (int i = 0; i < COUNT; i++)
                  {
                      if (visited[i] == false && cost[i] < minimum)
                      {
                          minimum = cost[i];
                          visitedVertex = i;
                      }
                  }
                  // Visit the vertex.
                  visited[visitedVertex] = true;
          
                  // Check whether there are shorter paths.
                  for (int i = 0; i < COUNT; i++)
                  {
                      if (visited[i] == false)
                      {
                          if ((cost[visitedVertex] + temp[visitedVertex][i]) < cost[i])
                          {
                              previous[i] = visitedVertex;
                              cost[i] = (cost[visitedVertex] + temp[visitedVertex][i]);
                          }
                      }
                  }
                  count++;
              }
              // Extract the paths.
              QVector<QVector<int>> paths;
              paths.resize(COUNT);
              int j;
              for (int i = 0; i < COUNT; i++)
              {
                  paths[i].push_back(i);
                  if (i != startVertex)
                  {
                      j = i;
                      do
                      {
                          j = previous[j];
                          paths[i].insert(paths[i].begin(), j);
                      } while (j != startVertex);
                  }
              }
              return paths;
            /*  vector<vector<int>> result = Dijkstra(Graph, 0);
                  for (int j = 0; j < result[finalVertex].size(); j++)
                      cout << result[finalVertex][j] << " ";*/
          }
          
          QVector<QVector<int>> result;
          result=Dijkstra(adjMatrix[COUNT][COUNT], boardData[][] );
          
          





    QPixmap q1("border.png");
    q1 = q1.scaledToWidth(35);
    q1 = q1.scaledToHeight(35);
    QPixmap q2("brick.png");
    q2 = q2.scaledToWidth(35);
    q2 = q2.scaledToHeight(35);
    QGraphicsPixmapItem boardImages[20][20];
    for (int i = 0; i < 20; i++)
        for (int j = 0; j < 20; j++)
        {
            //set image
            if ((boardData[i][j] == -10)||(boardData[i][j]== -20))
                boardImages[i][j].setPixmap(q1);
            else
                if(boardData[i][j] != -10 && boardData[i][j]!= -20)
                boardImages[i][j].setPixmap(q2);

            // Set Position
            boardImages[i][j].setPos(50 + (35 * j), 50 + (35 * i));
            // Add to the Scene
            scene.addItem(&boardImages[i][j]);
        }

    Jerry j(9, 9, boardData);
    scene.addItem(&j);
    scene.addItem(j.life);
    scene.addItem(j.win);
    Tom t(18,10,boardData);
    scene.addItem(&t);

    j.setFlag(QGraphicsPixmapItem::ItemIsFocusable);
    j.setFocus();

    t.setFlag(QGraphicsPixmapItem::ItemIsFocusable);





    QTimer timer;
    QTimer tim;
    tim.start(70);
    timer.start(150);
    tim.connect(&tim, SIGNAL(timeout()), &j, SLOT(move()));
    //t.UpdateMotion();
    timer.connect(&timer, SIGNAL(timeout()), &t, SLOT(UpdateMotion()));




    cheese c1(1, 1),c2(18,18),c3(1,18),c4(18,1);
    scene.addItem(&c1);
    scene.addItem(&c2);
    scene.addItem(&c3);
    scene.addItem(&c4);

    pellet p1(10,16),p2(15,10);
    scene.addItem(&p1);
    scene.addItem(&p2);

    view.setScene(&scene);
    view.show();
    return a.exec();
}
//}
